name: Coffee Tracker CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Unit Tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run linting (optional)
        continue-on-error: true
        run: |
          pip install ruff 2>/dev/null || true
          ruff check app/ tests/ 2>/dev/null || echo "‚ö†Ô∏è Ruff not configured, skipping lint"

      - name: Run tests with coverage
        env:
          API_KEY: test-ci-key
          SKIP_DB_INIT: "1"
          DATABASE_URL: "sqlite:///file:memdb1?mode=memory&cache=shared&uri=true"
          REDIS_URL: "memory://"
          PYTEST_CURRENT_TEST: "true"
        run: |
          python -m pytest tests/ -v --cov=app --cov-report=term-missing --cov-report=xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          files: ./coverage.xml
          fail_ci_if_error: false

      - name: Test summary
        if: always()
        run: |
          echo "## Test Results üß™" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ All tests completed" >> $GITHUB_STEP_SUMMARY

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    permissions:
      security-events: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push'

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  scan-image:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    name: Scan Docker Image

    steps:
      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy image results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, scan-image]
    if: github.ref == 'refs/heads/develop'
    # environment: staging  # Uncomment after creating GitHub environment in Settings ‚Üí Environments

    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Image digest: ${{ needs.build.outputs.image-digest }}"
          echo "‚ö†Ô∏è  TODO: Implement actual deployment (kubectl, docker-compose, etc.)"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, scan-image]
    if: github.ref == 'refs/heads/main'
    # environment: production  # Uncomment after creating GitHub environment in Settings ‚Üí Environments

    steps:
      - name: Deploy to production
        env:
          API_KEY: ${{ secrets.PRODUCTION_API_KEY }}
        run: |
          echo "Deploying to production environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "‚ö†Ô∏è  TODO: Implement actual deployment (kubectl, docker-compose, etc.)"
          echo "‚ö†Ô∏è  TODO: Add post-deployment health checks"

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "‚úÖ Production deployment successful"
          elif [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "‚úÖ Staging deployment successful"
          else
            echo "‚ùå Deployment failed"
          fi  
